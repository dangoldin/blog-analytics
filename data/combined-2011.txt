{% include setup %} When conducting interviews, I've developed the following criteria for a good interview problem:    	 Avoid brain teasers - they tend to be hit/miss and some people don't really do well under this type of problem  	 Challenging - the answer should not be immediately obvious and the should require some creativity  	 Rare - similar to above, the problem should not be a common question in order to get  	 Flexible - the problem has multiple solutions and can be modified on the fly for different skill levels     I've found that the following problem satisfies the criteria and gives a pretty good sense of a developer's skill level.  The problem starts of as a simple scenario:  You need to write a program that will accept a list of words. After the words are entered, the user will enter words and your program will need to indicate whether the entered word was in the original list. How would you design this program and what data structures would you use?  The typical answer to this question is to either store the initial word list in an array, a tree, or a hash. If it's an array or a tree, we talk about the Big O of the solutions and compare that to just using a hash. At this point you can get a sense of whether the person you're interviewing understands basic data structures and knows the use cases of each one.  To dig deeper, I add a twist:  Now imagine you were transported back in time and it turns out your program uses too much memory and you can't keep track of every word. Do you have any alternative solutions?  The creative solutions start appearing here and you can get a pretty good sense of the problem solving skills. For example, a proposed solution at this point is to use word roots or repetitive letter combinations in a tree like structure to reduce the memory usage. We then talk about the algorithm that would need to be written and try to point out possible problems and see how they would be addressed.  And a final twist:  Let's say you still do not have enough memory and but you find out that you don't need to be correct all the time. Can you think of any solutions that can achieve this?  At this point, many people will try to come up with a heuristic or machine learning technique to try to identify words that resemble the words previously entered. We can then talk about both how to construct the algorithm as well as talk about the accuracy of the approach. It turns out that for these solutions it's difficult to quantify the trade off between error rate and space requirements.     At this point the concept of a Bloom Filter is brought up, either by me or by the person I'm talking to. If it's by me I go through the basic concepts (bit array, hash functions, probabilistic data structures) and can get a good sense of whether this is understood or I need to dig deeper. It's great when you can see the moment that someone "gets" the value of this data structure and knows immediately how to use it. At this point we discuss the trade off between the size of the bit array and the number of hash functions. If there's time, we'll work on deriving the relationship between the two as well as talk about where they can be used in the real world.  I wish I could remember how I came up with this problem - I think it stemmed from me encountering Bloom Filters for the first time as well as reading a few articles about spell checking and dictionaries.
I'm not surprised that someone came out with an  online scheduling tool  for SMBs. I am a bit surprised that it was GroupOn though. I suspect many smaller companies have tried doing it but found selling to the SMB much more difficult than they expected. Since GroupOn already has penetration in the SMB space they may find it a lot easier, especially if, as it looks, they will be offering it free to any business that runs a GroupOn promotion.    This brings a good amount of value to the business:        Cheaper appointment booking system since fewer people will use the phone     Reminding customers about upcoming appointments      The real value is going to GroupOn though:        GroupOn can see how busy the businesses are (not just from GroupOns)     GroupOn can start offering a finer capacity management product - Imagine being able to see a haircut for $10 if you go in the next hour but $20 if you book it for tomorrow.     GroupOn will have major visibility into the way businesses operate and will be able to relate it back to the customer      I'll be watching this to see how it turns out but I'm glad to see this space innovating. As businesses get more comfortable running their business online it will become much easier for new companies to attack this space.
I'm not entirely sure what to think about the GoDaddy/SOPA situation. On one hand, it's great that the online community was able to get GoDaddy to completely reverse their position on SOPA. On the other, it's disappointing that a web company would support it in the first place.    Should we still be penalizing GoDaddy for their initial SOPA support or move on the same way they did? What type of example does this set for other companies? That they will be judged based on their original position and nothing after? Why even reverse your position if the community will behave as before?    In the meantime, there are  many companies  that support SOPA that the online community is not rallying against, including the majority of television networks (ABC, CBS, Disney, ESPN, Time Warner), and yet we still continue to watch tv. Our expectations for media companies are different than web companies, but do they have to be?