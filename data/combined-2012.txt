The combination of taking the subway every day and reading design books had me thinking of ways to improve the subway user experience, other than the obvious one of making it cleaner.    One thing that struck me is the feeling you get when you see the train leaving the station. It&#8217;s annoyingly stressful and makes me wonder how long I have to wait until the next train comes. Anything that can avoid this outcome would make waiting for the train a better experience. A way to do this is to limit the sensory feedback provided by seeing and hearing it leave. To avoid seeing the train until the last minute, subway stations can be designed to have stairs that need to be climbed in order to get to the platform. This way, the train and track will be hidden until the platform is reached. Making the train quieter would reduce the noise and prevent you from being aware that a train has left.    Of course, another cheaper and simpler way to deal with this is to just have something to occupy your time when waiting for the next train - that&#8217;s why having an iPad preloaded with ebooks is great.
I was reading Ben Yagoda&#8217;s book,  When You Catch An Adjective; Kill It , when I came across the following passage: &#8220;In Shakespeare&#8217;s day, there were no fancy props, so the text had to do the work of stage settings.&#8221; Although it was referring to starting sentences with conjunctions, it got me thinking about constraints and the way they foster innovation. Startups operate the same way: you don&#8217;t always have the resources to do what you want and are forced to innovate a way out.    Here are some examples:     Google realized that scaling vertically was significantly more expensive than scaling horizontally using commodity hardware. To achieve this, they had to create the  Google File System  to deal with the thousands of computers and the frequent hardware failures.    Many computer science algorithms and data structures were created when the CPU speeds were low and memory was lacking. Low CPU speeds led to more efficient graph search algorithms like Djikstra and A*. Limited memory led to the creation of probabilistic data structures like Bloom filters and Skip lists.     The Oakland Athletics baseball team could not compete on salary. But under Billy Beane, they were able to compete by adopting an analytical approach to identify talented, undiscovered baseball players (via  Moneyball ).    Even the Lean Startup methodology, which emphasizes rapid prototyping to quickly test market hypotheses, is a way to deal with the limited financial and time constraints that plague startups.       We often complain about obstacles while ignoring their impact on innovation. If you have any other examples of innovations caused by constraints, please share.
A few years ago, I was on vacation in Italy and spent a good amount of time on trains. Being from the US, I noticed that my ticket was not checked every single ride. At the same time, not having a ticket and being caught carried a large fine. Having the luxury of time, some assumptions, and some algebra, it’s straightforward to work out how to set the fine to make the two systems have the same expected revenue.  {%highlight txt %} N = number of passengers p = ticket price c = % of passengers that will be checked for a ticket v = % of passengers that are violators F = fine  Np = Np(1-c)(1-v) + Npc(1-v) + Ncv*F  Solving for F, we get that F = p/c. {% endhighlight %}  With these assumptions, the fine only depends on the ticket price and the check rate. For example, if the ticket price is $50 and there are 1,000 passengers, the expected amount collected is $50,000. If the conductor only checks 10% of passengers for tickets, the fine would need to be $500 to make the two systems equivalent. If the two systems are expected to generate the same revenue, but one is cheaper to implement, why is the seemingly non-optimal system chosen? I can think of a few reasons:  - Checking all tickets is easier than setting the check rate and fine - especially if they fluctuate - There are additional roles for the ticket collector other than checking tickets - There’s value in minimizing the volatility of the revenue - The cost of having conflicts between passengers and collectors over large fines is higher than checking every ticket - there may be a fear of a low-likelihood, high-cost event - Union agreements may prevent changing the structure - General cultural differences across continents  As entrepreneurs, we’re constantly thinking about the ideal business model. Noticing and comparing other business models help us refine and develop our own.  I’m always on the lookout for more examples, so if you have any please email me or post below.
A common question I get when telling my friends that I’m leaving my full time job to work on Glossi is “Why now? Why not continue working on it nights and weekends?” It’s a fair question - we’ve been working on Glossi for 6 months of nights and weekends and made significant progress. Why not keep doing that and have the best of both worlds?    Everyone has their own reasons but for me it was more of a gut feeling that it was the right time. I had the following thoughts in mind but I didn’t sit down to make a list of pros and cons:          We’re at the stage where the next steps cannot be done on nights and weekends. The coding is no longer the highest priority work and we now have to worry about business development and trying to raise funding. Neither of those can be done easily or efficiently on nights and weekends.        We’re close to finding our product-market fit and we want to get there as quickly as we can.        We felt as if the market is getting more competitive and we need to focus or be left behind. This may be especially true in the tech space where everything moves so quickly.        We realized that our todo list is growing much quicker than our progress through it. I don’t expect this to change but we want to make as much progress as we can.        I was spending more and more time thinking about Glossi that I was not as committed or focused at work. This was both a disservice to me and the company and I wanted to get out of the way as soon as I stopped being as productive as I should have been.      Please share your thoughts  - I’d love to hear other reasons.
An issue I’ve been trying to overcome is what I like to call the “build bias.” Whenever I’d run into a technical problem, I’d want to solve it on my own - whether it’s by writing some code or by installing and configuring various libraries and packages. I remember the time I needed to collect feedback for a website but instead of just using an off the shelf product like  GetSatisfaction , I decided to create my own. Although I was able to get it working, it took me longer than expected to get it into a usable state and distracted me from the other improvements I wanted to make.  As a developer, it’s very easy to convince yourself to build from scratch every time you need something rather than using an existing solution. It’s exciting to work on something new and it’s annoying integrating someone else’s code. It’s even worse when they’re charging a few dollars a month for something that you can build in a few hours.  More often than not we underestimate the cost of building something of sufficient quality and don’t include the ongoing maintenance cost we’ll most likely be doing. More importantly, we are no longer focusing on the highest leverage activity. As they teach in business schools, you shouldn’t outsource your core competency but everything else is fair game. This is also supported by the lean startup approach which encourages getting your product to market as soon as possible so you can validate your market hypotheses. Why spend time building features when you don’t even know you have a marketable product? If it does turn out that you have a successful product you can always go back and develop your own solution then.  My new process is to first make sure that the feature is even needed. If it is, I check out the open source alternatives to see if anything can be used. If not, I look at the available paid solutions. For many small projects, it turns out that you can ride the trial/basic version enough to validate your idea. This approach has led  Glossi  to use  MongoHQ  to host my database,  SendGrid  as my email system, and  GetSatisfaction  as a feedback widget in addition to ton of open source libraries. With every new project, I’m offloading more and more of my auxiliary features to cloud based services and feel much more productive. Makes me wonder how many other services there are out there that can be leveraged.
A few years ago I worked on a startup with the goal of providing local event recommendations. Unfortunately, we were never able to make it work. We focused too much on building new features, didn’t simplify our product enough, didn’t have a focused vision, and didn’t spend time understanding the market. After reading Mark Hendrickson’s  Plancast’s postmortem , I started thinking about the problem again and what a successful approach would look like. As Mark pointed out, it’s difficult to incent people to consistently broadcast their plans. Most people will only plan major events in advance and even fewer will log into a website to note that they’re going to grab beers with a friend in a few hours. One thing people are starting to do is checking in to a venue. Knowing the present is a lot simpler than thinking about the future and smartphones have reinforced this behavior. Foursquare has been riding this wave and apps like GroupMe and Fast Society have also taken advantage.    Instead of trying to change user behavior, it’s easier to leverage existing behaviors but apply it to something else. Foursquare is best positioned to move into the event recommendation space. It has already started providing venue recommendations based on historical checkins and there’s value in knowing that 50 people have checked into a stadium within a few minutes of one another. By integrating with an event database, it’s possible to know what events people are attending. This information can initially be used to recommend venues that have similar events going on. Over time, this can transition into doing direct event recommendations.
I recently made an effort to improve my writing and this blog gives me a great way to practice. I force myself to write at least two posts a week, even if it’s just a paragraph. Writing hasn’t come easy to me and I spent more than 20 years returning the favor. In high school, I rarely edited and a quick spell and grammar check was good enough for me. In college, I avoided the writing-heavy classes and the ones I did take I just followed my high school approach. Something changed when I started working. Although initially driven by my desire to perform, I started seeing writing as a challenging, creative process. I remember spending 30 minutes on a paragraph-long email before being comfortable enough to send it out. Even after only a few weeks, I feel that my writing has gotten better - both in terms of speed and clarity. I still have trouble writing long posts since I tend to go on tangents and lose focus.      An issue I’m currently dealing with is deciding when something is “done.” I could always spend more time editing and rewriting but should I? How much editing is a good use of my time? Jack Kerouac wrote the first draft of On The Road in three weeks and the final draft in 20 days. On the other hand, T. S. Eliot wrote The Waste Land over a few years, with the drafts being almost twice as long. I fall somewhere in between. I realize that I learn better through struggle and forcing myself to edit and rewrite helps me in the long term. At the same time, I realize that I have a ton of other things to do and rewriting the same paragraph a dozen times is not the best use of my time. At the moment, I write and rewrite until I’m proud of what I have and hope that it will get easier in the future. As frustrating as it can get, it’s significantly easier than what people were doing only 20 years ago before computers. This thought helps me focus and slowly work my way up to the fabled 10,000 hours.
The big news today was that Facebook acquired Instagram for $1B in cash and stock. I don’t want to debate whether that was a good price but I am amazed that Instagram was able to get to over 30 million users with 13 employees, of which 3 are engineers. I see a few factors combining to make this an ideal model for the future tech startup.          Open source tools and the cloud have made starting easier than ever and a few motivated, talented people can build a marketable product over a weekend.    Social networks simplify distribution and allow a good product to stand out and succeed without heavy marketing.    People are comfortable with technology and can start using a product without any dedicated support.       They are converging to provide a massive increase in leverage. A small team is able to quickly and cheaply build a product that can spread organically to millions of users. The enterprise space will also be impacted as people start expecting their personal tools in their corporate environments. It’s definitely an exciting time to be building a tech startup.
We’re aware of Zynga’s purchase of Draw Something and Zynga’s emphasis on analytics and metrics to drive product features and decisions. I’m a bit late to the party but I tried brainstorming to put together  a Zyngafied version of Draw Something:              Favor drawings that require colors that a user does not have to encourage the user to buy new colors.      Leverage the priming effect by picking words that will encourage users to spend more. For example using the words “gold”, “coin”, and “rich” would put users in a buying mood.      Charge more for the more popular color packs.      Include “limited edition” color and word packs.      Reward active users with free color packs, bombs, etc.        I, for one, am glad that I got to play Draw Something before it turns into this money extraction machine.
In a  previous post , I discussed the factors that allow small teams to create products that can be exposed to millions of users within a few months. In this post, I want to take a deeper look into why consumers are so much more comfortable with technology now compared to 20 years ago and try to see where this leads. Since customers are what cause our businesses to grow, we need to be cognizant of what drives their behavior in order to plan for the future. Wayne Gretzky’s father famously said “A good hockey player plays where the puck is. A great hockey player plays where the puck is going to be” and I’m hopeful that we’ll be able to see where the consumer puck is going to be.  To me, the major driver is  Moore’s Law . We’ve seen computation speeds double every 18 months for the past 50 years. This has obviously led to faster computers but has also led to exponentially reducing costs. This has been a huge economic driver and is allowing computers to be more accessible than ever. Our cellphones are more powerful than what was used to land on the moon. These increases in computation also led to the rise of the modern web. It went from being a military/academic project that dealt with text data to something that’s distributing pictures and videos to whoever is interested.  More importantly, improvements in computation led to improvements in usability. Even if we had modern browser standards like CSS3 and HTML5 in the 1990s our computers would be too weak to handle them. We would not have any of the modern innovations (AJAX, DOM manipulation) and our web pages would be static without any rich media content. If we never got past the command line, how many people would have computers in their home? How many smartphones would exist? I’d argue that the usability improvements are what led to the massive consumer adoption of tech products. Of course, computation, cost, and usability are all intertwined but computation and cost alone would not have led to the consumer adoption we’ve seen.  What does this mean for the future? I see usability becoming even more native with us not realizing that we’re even using a computer. We’re already seeing this emerging with Siri and Google Glasses. As long as our computation speeds continue to improve these technologies will become better and better and will recede more and more into the background. Of course, this is all dependent on Moore’s Law holding, with many saying the pace will decrease by 2020. I’m optimistic that we’ll come up with something but even if we don’t, as long as we computing costs keep on dropping, via  Koomey’s Law , we should still see the benefits as we move more and more computation to the ever cheaper cloud. It’s difficult to imagine what would happen if our computation speeds stop increasing the way they have been over the past 50 years.
A great blog I’ve recently started following is  Blake Master’s notes  from Stanford’s CS183 class being taught by Peter Thiel. Peter provides an insightful view of the tech startup world that is valuable to anyone interested in startups and entrepreneurship.
A trend I’ve been noticing more and more is enterprise sales being done bottoms up. The typical approach is to offer a free trials or have some sort of freemium product. Each sign up is then treated as an inbound lead that is assigned an account manager. Within two weeks of signing up for New Relic I was contacted by an account manager who helped answer my questions and helped me get New Relic set up for Glossi. Working with him, we were able to get a longer trial period and a discounted price for when we’re ready to upgrade.  HubSpot found  that inbound leads cost 61% less than outbound leads. If having a strong SEO and Social Media presence drops acquisition costs that much imagine the drop caused by having a usable product. Although we’re a small, scrappy startup that’s quick to try new products and services, I believe this approach will become the standard way of selling SAAS in the enterprise. It’s much easier to get a person to try something new and if you can turn him into a fan, you’re one step closer to getting the company signed up.    An extreme case of this would be to initially build a product that’s focused on the consumer and only building out enterprise features when there’s a clear demand for them. A great example would be Dropbox, they initially focused exclusively on making a kick-ass experience for the consumer and only after nailing that down did they release the “ Dropbox for Teams ” plans. I don’t recall the history of  GitHub  but they may have done something similar - initially focusing on public and private repositories and then growing into the more enterprise friendly plans. This is a great approach for a product driven startup since you can focus on building your product without getting stuck in the twisted path of custom client work. But when your product and team are more fleshed out, you can focus on the additional revenue opportunities created by going after the enterprise.
I recently watched  Miss Representation  which documents how the portrayal of women in the media affects women’s roles in society. It raised many interesting points and definitely got me thinking. If you haven’t seen it already you should definitely check it out. One of the points was that there’s a huge pressure to cast female roles with young actresses whereas it doesn’t matter so much for the male. I was sure this was true but I wanted to see how big of a deal it actually was, take a coding break, and play around with some data. The goal was to replicate the results as well as provide some tools for others to do similar analyses.  I took a quick look at the IMDB site and realized that they did not have an API available. I looked at a few open source alternatives but they all seemed like overkill for what I wanted to do so I decided to just write a quick Python script to scrape the pages I needed. I started by pulling the top 50 movies for each decade (via    http://www.imdb.com/chart/1910s    -    http://www.imdb.com/chart/2010s )   and then pulling the top 5 cast members for each movie (via    http://www.imdb.com/title/tt1375666/fullcredits#cast )  . I had to actually look at the actor/actress pages as well in order to pull the birth dates as well as the sex. After loading this data into a database it was a very simple query to run the analysis and then  Google Spreadsheets  to clean it up.   Not surprisingly, it turns out that over the past 11 decades, the average actor is 41 while the average actress is 32. Interestingly, during the 1980s they were almost the same but the gap has been widening since then.        I may be a bit late to the “ Don’t learn to code ” debate but I think this illustrates that coding is a pretty useful skill to have. It’s not about being able to develop enterprise applications but more about automating some work and being able to scratch a curiosity itch. If this data were publicly available and everyone had the tools and abilities to do these types of analyses I believe we’d be in much better shape. Maybe someone can take the work I started and leverage it to discover something new.      Note: The code to scrape IMDB is posted on  github  but note that it’s definitely crude and hackish at times. My goal was to get the analysis done as quickly as possible so I didn’t spend too much time refactoring.
{% include setup %}      Over the past few days, I’ve been thinking about habits. How do they form? How do they change? And the selfish one - how can you build a product that is habit forming? My cofunder sent me a great Nir &amp; Far  blog post  that goes into detail about generating desire which is a great read to anyone building a consumer product.  Along these lines, I decided to be a bit introspective and see which products and sites are a part of my habit. A simple way was to type each letter of the alphabet into the Google Chrome address bar and see what site autocompletes. Here goes:       analytics.google.com     bankofamerica.com     cad-comic.com/cad     docs.google.com     eventbrite.com     facebook.com     glos.si     heroku.com     instapaper.com     joinblended.com     klout.com     linkedin.com     maps.google.com     news.ycombinator.com     optimum.com     plus.google.com     questionablecontent.net     reader.google.com     startupmullings.com     twitter.com     udacity.com     voice.google.com     wixlounge.com     xkcd.com     youtube.com     zerply.com      After excluding my sites (glos.si and startupmullings.com), we can organize them into the following categories:        Entertainment (the comic sites - xkcd, QC, CAD; Youtube; Google Reader)     Social Networks (Facebook, LinkedIn, Google Plus, Twitter)     Utilities (Google analytics/docs/voice, Bank of America, Instapaper, Eventbrite, Optimum, Heroku)     The rare letters (Zerply, Udacity, Wix Lounge). I’d like to include Klout on this list rather than admit to browsing it but I don’t know if that will be believable.     Every consumer site should strive to get to browser autocomplete status for some users rather than being semi-popular to more users. Being useful to a few passionate users and growing with their help is a much better approach than trying to immediately appeal to the mass market.  And although this exercise may be embarrassing, I’d love to see what others have as their 26 sites.

I read an  article  earlier today about how companies are preparing for a possible demise of RIM and couldn’t help but compare RIM’s decline over only a few years compared to how long it’s taking IE to disappear.  To confirm that there is in fact a difference in behavior, we can compare the RIM share among smartphones and IE share among browsers. Turns out that they are noticeably different: IE is on a linear decline with close to 70% in Q3&#160;2008 but around 36% in Q1&#160;2012 while RIM starts at 16% in Q3&#160;2008, goes up to a high of 21% in 2009 and then drops to 7% in Q1&#160;2012. Plotting their % decline since the data starting point highlights this further. If we calculate the average decline per quarter from their highest levels and try to see how long it will take to hit 0% share, IE will take almost 4 years while RIM will take less than 5 quarters.          Why are they so different? If they’re both in the enterprise why don’t we see a similar decline in both? I was able to think of a few reasons but would love to hear what others think.       RIM’s competition has been much stronger - both Apple and Android have been eating up the share at a massive rate while the browser market has been relatively stable. This is compounded by smartphones being a new, quickly evolving industry where people are upgrading phones as frequently as they can.     Guy Kawasaki says that companies should focus on making their product  10 times better  than the existing competition in order to get adoption. This may be a lot easier to accomplish with smartphones than with browsers.     Browsers are an older industry and there’s no point in even doing this comparison. We should do this analysis when the smartphone market is more mature and we can normalize the two time frames.     I tried digging in a bit further but it’s unfortunate how difficult it is to find browser market share data. I’d love to dive in and look at the trend in the browser market since the 1990s and see how that compares to the trend in smartphones. If anyone has this data please let me know.  Here's the  Google spreadsheet  if you want to play around with the data.
A frustration I’ve been experiencing more and more is having to reload a webpage in order to change the date range in the options. If a company expects me to keep a site open for more than a day they should make it easy for me to update the options. The big example is Google Analytics - I open up a page, choose a date range, and get to see my charts. If I keep the tab open and want to want to run the same analysis the next day, I’m forced to reload the page to even be able to include today in the date range. It’s an unnecessary action for the user and it would be easy to correct this behavior with some simple Javascript.    Such small details don’t matter individually but together they reflect a lack of empathy for the user that impacts a company culture. We should always be striving to make a user’s experience better and doubly so whenever it’s actually an easy fix. Other easily fixable examples I’ve seen are clearing entire forms when there’s an error with one field and not highlighting the field that’s giving the error.    I suspect the reason these aren’t fixed is a managerial problem. The application works and there’s no reason to go back when there are all sorts of new shiny things that can be built. No one wants to do a cost vs value analysis for these minor fixes so they stay the way they are. I suppose you need to either build things the right way immediately, fix it without letting anyone know, or resign to leaving it alone.    There’s a reason startups tend to have better products. They don’t go through analyses to determine whether to make minor changes, all it takes is for someone to decide that something needs to be fixed and the next deployment, probably within a few hours, will have it solved. Combined with the massive sense of ownership that comes with working at a startup, that’s a lot of improvements that would be done at a startup but not a larger company.
Reading recent tech coverage makes you think that each newly startup is more valuable than Yahoo. Yahoo is the 4th most visited site in the world with over 300 million users on Yahoo mail. This is a problem every startup should hope to have.      User acquisition is the most difficult task for a consumer startup. User attrition is an easier problem to solve than user acquisition. Yahoo doesn’t need to build a product that’s 10 times better than the competition, they just need to simplify and improve what they already have. Yahoo also has massive usage among the mass market with millions of people having Yahoo as their home page. These are not the same people that sign up for every startup featured on TechCrunch. Yahoo has challenges but worrying about user acquisition is not one of them. Yahoo will need to develop a vision and relentlessly pursue it. The culture will need to change and vested interests will need to be broken.      It’s easy to criticize Yahoo for ignoring Google and Facebook but impossible to say what Yahoo should be doing now. I look forward to seeing what happens to Yahoo with Marissa Mayer at the helm.
{% include setup %}       I was rereading the HBR paper on  Strategies for Two Sided Markets  and came across a passage describing Apple’s mistake of trying to monetize both sides of their market, the consumers and the developers, rather than focusing on one like Microsoft did by giving away the SDK for free.    It got me thinking about Apple’s recovery. Many people credit the iPod with revitalizing Apple but I think there’s more than that. I suspect the bigger reason was the decline of desktop software and the ability to be productive on the web. Suddenly the network effects that existed by having software that only worked on Windows no longer existed. Software started migrating to the web and people were more willing to try new operating systems out. In 2006, I switched to Linux without too much trouble. It was also simple to find help online to deal with the various issues I ran into which made the transition easier. In some ways, Google helped Apple recover by speeding up the move to the web with a more accurate search and a good set of productivity apps.    In general, it’s damn difficult to overcome network effects. Google will not be replaced by a search engine. Facebook will not be replaced by a social network. These network effects will be broken by a behavioral change. Instagram rode this wave of behavioral change of the move to mobile and it was a savvy move for Facebook to make the acquisition. It makes you wonder what Instagram could have become had it stayed independent.    Innovation is cannibalization. By pushing the envelope of technology, pioneering companies cause behavioral changes that will give rise to companies that may end up replacing them. As Clay Christensen  notes , it’s rare for a mature company to put resources behind a disruptive technology that will cannibalize itself but it’s the only way to stay relevant. Only  13% of the companies  in 1955’s Fortune 500 made the list in 2011. It’s amazing to see how quickly things change and the pace is only getting quicker.
{% include setup %} I'm going to work on migrating my posts over from Wordpress and Tumblr on to here. Let's see how it goes.
{% include setup %} After a few hours of solid work I was able to get my new site up and running on Github pages. I got frustrated with having too many blogs and decided that I should finally get it together and consolidate everything. Within a few hours I was able to get it up and running on Github pages up and migrated my old Tumblr and Wordpress posts. Hopefully this encourages me to write more.  A few notes: 1. The  documentation  for Jekyll is great and makes it very easy to get started. 2. Jekyll comes with a few  migration  scripts that made it easy to move the old blog posts over. 3. There's a pretty strong community around it so it's easy to get started with themes. I ended up using  one  based on Twitter Bootstrap. 4. Github pages provide a custom domain option so you can host your entire site in Github. Other than the fact that it's free, you don't have to worry about your site dying due to heavy load. 5. An issue to be aware of is that the Jekyll parser is pretty strict and doesn't provide very helpful error messages. I had an issue that prevented some posts from migrating because they had a ":" in the titles. To discover this, I had to migrate a few posts at a time until I was able to identify the issue.
{% include setup %}   Let’s start with a joke:          An American consultant was at a pier in a small coastal Mexican village when a small boat with just one fisherman docked. Inside the small boat were several large tuna. The American complimented the Mexican on the quality of his fish and asked how long it took to catch them.       The Mexican replied "Only a little while." The consultant then asked why didn't he stay out longer and catch more fish? The fisherman said he had enough to support his family's immediate needs. Then the American asked how he spent the rest of his time.       The Mexican fisherman said, "I sleep late, fish a little, play with my children, take a siesta with my wife, Maria, and then stroll into the village each evening where I sip wine and play guitar with my amigos. I have a full and busy life, senor."       The American consultant scoffed, "I am a very successful business consultant and could help you. You should spend more time fishing and, with the proceeds, buy a bigger boat. With the proceeds from the bigger boat, you could buy several boats, and eventually you would have a fleet of fishing boats. Instead of selling your catch to a middleman you would sell directly to the processor, eventually opening your own cannery. You would control the product, processing and distribution. You would need to leave this small coastal fishing village and move to Mexico City, then Los Angeles and eventually New York City where you will run your expanding enterprise."       The Mexican fisherman asked, "But senor, how long will this all take?"       The consultant replied, "Probably 15 to 20 years."       "But what then, senor?" asked the fisherman.       The consultant laughed, and said, "That's the best part! When the time is right, you would announce an IPO and sell your company stock to the public. You'll become very rich, you would make millions!"       "Millions, senor?" replied the Mexican. "Then what?"       The American said, "Then you would retire. Move to a small coastal fishing village where you would sleep late, fish a little, play with your kids, take siestas with your wife, stroll to the village in the evenings where you could sip wine and play your guitar with your amigos."    Other than the chuckle, this joke got me thinking about how people view work. The joke suggests that you should only work to support your life outside of work. If you work more than that then the joke’s on you since you’re sacrificing your personal life. This is view that you can’t have if you’re starting a company. Entrepreneurs need to combine their personal and professional lives. If you’re running a startup and aren’t thinking about the market, your product, or your users when you’re in the shower or in bed you’re doing it wrong. More importantly, this should be natural and not forced. If you don’t enjoy thinking about your startup when times are good, how will you be able to do it when times are tough (which they will be)? We need our passion to get over the humps so if you’re not passionate about your startup when you’re starting out, you will abandon it when facing challenges. Your startup will end up consuming you so why not pick something that you care about?
{% include setup %} As a gift to myself I decided to upgrade the RAM and HD in my MacBook. The plan was to replace the old HD with the new one and then use the install disc to install Snow Leopard on the new HD before upgrading to Mountain Lion. Unfortunately, it turned out that I had a bad install disc and had to come up with another approach. The general idea was to upgrade to Mountain Lion first in order to create another boot disc.  1. Upgrade OS to Mountain Lion and make sure to have a copy of the installation file around 2. Put the new HD into an external enclosure 3. Create two partitions on the new HD, one should be 8 GB to hold the Mountain Lion install boot disc 4. Use  Lion Disk Maker  to create the boot disc on the 8 GB partition of the new HD ( instructions ) 5. Shut down the computer and replace your HD with the new HD 6. Boot your computer while holding down the option key 7. Select the Mountain Lion boot disc from the selection screen and install it on the other partition 8. Mountain Lion is now installed on the new HD 9. You can now remove the Mountain Lion boot partition and use that space for something else  An easier approach would have been to just use a USB flash drive or an SD card to create the boot disc. Unfortunately, I didn't have any that had a capacity of more than 8 GB so I had to resort to this hack.
{% include setup %}  I just hacked together a quick app to help download Instagram photos. At first, I tried using  Instaport  and  OpenPhoto  but both of them were backed up with others trying to do the same so I decided to create my own. It's basically a really simple python web app that allows you do a quick authentication with Instagram and then lets you downloads all your images to your hard drive.  It should be pretty easy to get started by following the readme on github:  https://github.com/dangoldin/instagram-download